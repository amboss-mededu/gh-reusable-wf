name: Terraform
on:
  workflow_call:
    inputs:
      DIR: 
        required: true
        type: string
      REGION:
        required: true
        type: string
    secrets:
      AWS_ACCOUNT_ID:
        required: true
      DEPLOY_SSH_KEY:
        required: false
    outputs:
      PLAN_OUTCOME:
        value: ${{ jobs.terraform.outputs.PLAN_OUTCOME }}
      APPLY_OUTCOME:
        value: ${{ jobs.terraform.outputs.APPLY_OUTCOME }}
## Token Permissions required
#    permissions:
#      id-token: write
#      contents: write
#      pull-requests: write
#      packages: read

jobs:
  terraform:
    name: Terraform workflow
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      PLAN_OUTCOME: ${{ steps.plan.outcome }}
      APPLY_OUTCOME: ${{ steps.apply.outcome }}
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      packages: read
    steps:
      - name: Get Code
        uses: actions/checkout@v3
        with:
          path: deployment
          
      - name: Add deploy key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
      - name: Copy Code
        if: contains(inputs.DEPLOY_SSH_KEY,'PRIVATE') == false
        run: |
          git clone git@github.com:amboss-mededu/infra-template template
          cp -a -n ${{ github.workspace }}/template/${{ inputs.DIR }}/* ${{ github.workspace }}/deployment/${{ inputs.REGION }}/${{ inputs.DIR }}/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/devops
          role-session-name: GithubActions-Terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: |
          cd ${{ github.workspace }}/deployment/${{ inputs.region }}/${{ inputs.DIR }}
          terraform init 

      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ github.workspace }}/deployment/${{ inputs.region }}/${{ inputs.DIR }}
          terraform plan \
            -var-file=${{ github.workspace }}/deployment/account_info.tfvars \
            -var 'region=${{ inputs.REGION }}'  \
            -no-color -lock-timeout=300s \
            -out=${{ github.workspace }}/terraform-plan-${{ github.run_id }}.output
        continue-on-error: true
 
      - name: Terraform Refresh
        if: contains(steps.plan.outputs.stdout, 'has changed')
        run: |
          cd ${{ github.workspace }}/deployment/${{ inputs.region }}/${{ inputs.DIR }}
          terraform refresh
          terraform plan \
            -var-file=${{ github.workspace }}/account_info.tfvars \
            -var 'region=${{ inputs.REGION }}'  \
            -no-color -lock-timeout=300s \
            -out=${{ github.workspace }}/terraform-plan-${{ github.run_id }}.output
        continue-on-error: true

      - name: Post Plan output to PR
        uses: actions/github-script@v5
        if: github.event_name == 'pull_request' && github.event.pull_request.merged != true
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan Networkingüìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })     

      - name: Terraform Apply
        if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true
        id: apply
        run: |
          cd ${{ github.workspace }}/deployment/${{ inputs.region }}/${{ inputs.DIR }}
          terraform apply ${{ github.workspace }}/terraform-plan-${{ github.run_id }}.output

      - name: Post Apply Output to PR
        if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true
        uses: actions/github-script@v5
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Apply Networkingüìñ\`${{ steps.apply.outcome }}\`

            <details><summary>Show Apply</summary>

            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
