name: Terraform
on:
  workflow_call:
    inputs:
      DIR: 
        required: true
        type: string
      REGION:
        required: true
        type: string
      TF_REGION:
        type: string
        required: true
      RUNS_ON:
        type: string
        required: false
        default: self-hosted
    secrets:
      IAM_ROLE:
        required: true
      DEPLOY_SSH_KEY:
        required: false
    outputs:
      PLAN_OUTCOME:
        value: ${{ jobs.terraform.outputs.PLAN_OUTCOME }}
      APPLY_OUTCOME:
        value: ${{ jobs.terraform.outputs.APPLY_OUTCOME }}

jobs:
  terraform:
    name: Terraform workflow
    runs-on: ${{ inputs.RUNS_ON }}
    defaults:
      run:
        shell: bash
    outputs:
      PLAN_OUTCOME: ${{ steps.plan.outcome }}
      APPLY_OUTCOME: ${{ steps.apply.outcome }}
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      packages: read
    steps:
      - name: Get Code
        uses: actions/checkout@v3
        with:
          path: deployment

      - name: Check dir
        id: check_dir
        run: |
          if [[ -d ${{ github.workspace }}/deployment/${{ inputs.REGION }}/${{ inputs.DIR}} ]] && [[ -f ${{ github.workspace }}/deployment/${{ inputs.REGION }}/${{ inputs.DIR}}/state.tf ]]
          then
            echo "::set-output name=execute::true"
          else
            echo "::set-output name=execute::false"
          fi
          if [[ '${{ secrets.DEPLOY_SSH_KEY }}' == '' ]]
          then
            echo "::set-output name=use_template::false"
          else
            echo "::set-output name=use_template::true"
          fi

      - name: Add deploy key
        if: steps.check_dir.outputs.execute  == 'true' && steps.check_dir.outputs.use_template == 'true'
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
      - name: Copy Code
        if: steps.check_dir.outputs.execute  == 'true' && steps.check_dir.outputs.use_template == 'true'
        run: |
          git clone git@github.com:amboss-mededu/infra-template template
          cp -a -n ${{ github.workspace }}/template/${{ inputs.DIR }} ${{ github.workspace }}/deployment/${{ inputs.REGION }}/

      - name: Checkov Scan
        if: steps.check_dir.outputs.execute  == 'true'
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ github.workspace }}/deployment/${{ inputs.region }}/${{ inputs.DIR }}
          framework: terraform 
        continue-on-error: true

      - name: TFSec Scan
        if: steps.check_dir.outputs.execute  == 'true'
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ github.token }}
          working_directory: ${{ github.workspace }}/deployment/${{ inputs.region }}/${{ inputs.DIR }}
          soft_fail_commenter: true

      - name: Configure AWS Credentials
        if: steps.check_dir.outputs.execute  == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.TF_REGION }}
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: GithubActions-Terraform

      - name: Setup Terraform
        if: steps.check_dir.outputs.execute  == 'true'
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        if: steps.check_dir.outputs.execute  == 'true'
        id: init
        run: |
          cd ${{ github.workspace }}/deployment/${{ inputs.region }}/${{ inputs.DIR }}
          terraform init 

      - name: AWS Auth for eks
        if: contains(inputs.DIR,'eks_addons') && steps.check_dir.outputs.execute  == 'true'
        run: |
          cd ${{ github.workspace }}/deployment/${{ inputs.region }}/${{ inputs.DIR }}          
          if [[ ! $(terraform state list |grep kubernetes_config_map_v1.aws_auth) ]]
          then
            terraform apply -input=false -var-file=${{ github.workspace }}/deployment/account_info.tfvars -var 'region=${{ inputs.REGION }}' -target=data.aws_eks_cluster.eks
            terraform import -var-file=${{ github.workspace }}/deployment/account_info.tfvars -var 'region=${{ inputs.REGION }}' kubernetes_config_map_v1.aws_auth kube-system/aws-auth
          fi
        continue-on-error: true

      - name: Terraform Plan
        if: steps.check_dir.outputs.execute  == 'true'
        id: plan
        run: |
          cd ${{ github.workspace }}/deployment/${{ inputs.region }}/${{ inputs.DIR }}
          terraform plan \
            -input=false \
            -var-file=${{ github.workspace }}/deployment/account_info.tfvars \
            -var 'region=${{ inputs.REGION }}'  \
            -no-color -lock-timeout=300s \
            -out=${{ github.workspace }}/terraform-plan-${{ github.run_id }}.output
        continue-on-error: true

      - name: Terraform Refresh
        if: contains(steps.plan.outputs.stdout, 'Objects have changed outside of Terraform') && steps.check_dir.outputs.execute  == 'true'
        run: |
          cd ${{ github.workspace }}/deployment/${{ inputs.region }}/${{ inputs.DIR }}
          terraform refresh \
            -input=false \
            -var-file=${{ github.workspace }}/deployment/account_info.tfvars \
            -var 'region=${{ inputs.REGION }}'  \
            -no-color -lock-timeout=300s            
          terraform plan \
            -input=false \
            -var-file=${{ github.workspace }}/deployment/account_info.tfvars \
            -var 'region=${{ inputs.REGION }}'  \
            -no-color -lock-timeout=300s \
            -out=${{ github.workspace }}/terraform-plan-${{ github.run_id }}.output
        continue-on-error: true

      - name: Post Plan output to PR
        uses: actions/github-script@v5
        if: github.event_name == 'pull_request' && github.event.pull_request.merged != true && steps.check_dir.outputs.execute  == 'true'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan ${{ inputs.REGION }}/${{ inputs.DIR }}üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })     

      - name: Terraform Apply
        if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true  && steps.check_dir.outputs.execute  == 'true'
        id: apply
        run: |
          cd ${{ github.workspace }}/deployment/${{ inputs.region }}/${{ inputs.DIR }}
          terraform apply ${{ github.workspace }}/terraform-plan-${{ github.run_id }}.output

      - name: Post Apply Output to PR
        if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true && steps.check_dir.outputs.execute  == 'true'
        uses: actions/github-script@v5
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Apply ${{ inputs.REGION }}/${{ inputs.DIR }}üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Apply</summary>

            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
